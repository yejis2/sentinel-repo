import "tfstate" as state
import "tfplan"
import "strings"

# Find all resources of specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {
    resources = {}
    for tfplan.module_paths as path {
        for tfplan.module(path).resources[type] else {} as name, instances {
            for instances as index, r {
                # Get the address of the resource instance
                if length(path) == 0 {
                    # root module
                    address = type + "." + name + "[" + string(index) + "]"
                } else {
                    # non-root module
                    address = "module." + strings.join(path, ".module.") + "." +
                              type + "." + name + "[" + string(index) + "]"
                }
                # Add the instance to resources, setting the key to the address
                resources[address] = r
            }
        }
    }
    return resources
}

# Forbidden IAM actions
param forbidden_actions default ["cloudtrail:StopLogging*"]

# Get all IAM policy document data sources
allIAMPolicyDocs = state.find_resources_from_plan("aws_iam_policy_document")

# Filter to IAM policy documents with violations
validated = true
for allIAMPolicyDocs as address, d {

	# Find the statements of the current policy doc
	statements = state.find_blocks(d, "statement")

	# Filter to violating statements of current policy doc
	violatingStatements = state.case_insensitive_filter_attribute_contains_items_from_list(
		statements, "actions", forbidden_actions, false)

	# Print warnings if any violating statements
	if length(violatingStatements["messages"]) > 0 {
		validated = false
		print(address, " has at least one statement with forbidden actions:")
		state.print_violations(violatingStatements["messages"], "Statement")
	} // end if

} // end for

# Main rule
main = rule {
	validated
}
