import "tfstate" as state

find_datasources = func(type) {
  datasources = filter tfstate.resources as address, d {
  	d.type is type and
  	d.mode is "data"
  }

  return datasources
}

find_blocks = func(parent, child) {
  # Use parent.values if it exists
  if (types.type_of(parent) is "map" and
     "values" in keys(parent)) and
     types.type_of(parent.values) is "map" {
    if types.type_of(parent.values[child] else null) is "list" {
      return parent.values[child]
    } else {
      return []
    }
  } else {
    if types.type_of(parent[child] else null) is "list" {
      return parent[child]
    } else {
      return []
    }
  }
}


# Forbidden IAM actions
forbidden_actions = ["cloudtrail:StopLogging*"]

# Get all IAM policy document data sources
allIAMPolicyDocs = find_datasources("aws_iam_policy_document")

# Filter to IAM policy documents with violations
validated = true
for allIAMPolicyDocs as address, d {

	# Find the statements of the current policy doc
	statements = state.find_blocks(d, "statement")

	# Filter to violating statements of current policy doc
	violatingStatements = state.case_insensitive_filter_attribute_contains_items_from_list(
		statements, "actions", forbidden_actions, false)

	# Print warnings if any violating statements
	if length(violatingStatements["messages"]) > 0 {
		validated = false
		print(address, " has at least one statement with forbidden actions:")
		state.print_violations(violatingStatements["messages"], "Statement")
	} // end if

} // end for

# Main rule
main = rule {
	validated
}
